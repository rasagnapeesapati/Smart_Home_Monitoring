/**
 * ESP32-CAM Project: Capture Image and Save to MicroSD with Deep Sleep
 * ----------------------------------------------------------
 * Features:
 * - Captures image using AI-Thinker ESP32-CAM module
 * - Stores image to SD card (in 1-bit mode to keep flash LED usable)
 * - Uses EEPROM to maintain sequential image naming
 * - Turns on LED flash during capture
 * - Enters deep sleep after capture
 * 
 * Author: Your Name
 * GitHub: https://github.com/yourusername
 * Date: YYYY-MM-DD
 */

#include "esp_camera.h"
#include "Arduino.h"
#include "FS.h"
#include "SD_MMC.h"
#include "SPI.h"
#include "soc/soc.h"           // Disable brownout problems
#include "soc/rtc_cntl_reg.h"  // Disable brownout problems
#include "driver/rtc_io.h"
#include <EEPROM.h>            // Read and write from flash memory

// EEPROM configuration
#define EEPROM_SIZE 1

// CAMERA_MODEL_AI_THINKER Pin definition
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

int pictureNumber = 0;

void setup() {
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); // Disable brownout detector
  Serial.begin(115200);

  // Camera Configuration
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer   = LEDC_TIMER_0;
  config.pin_d0       = Y2_GPIO_NUM;
  config.pin_d1       = Y3_GPIO_NUM;
  config.pin_d2       = Y4_GPIO_NUM;
  config.pin_d3       = Y5_GPIO_NUM;
  config.pin_d4       = Y6_GPIO_NUM;
  config.pin_d5       = Y7_GPIO_NUM;
  config.pin_d6       = Y8_GPIO_NUM;
  config.pin_d7       = Y9_GPIO_NUM;
  config.pin_xclk     = XCLK_GPIO_NUM;
  config.pin_pclk     = PCLK_GPIO_NUM;
  config.pin_vsync    = VSYNC_GPIO_NUM;
  config.pin_href     = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn     = PWDN_GPIO_NUM;
  config.pin_reset    = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;

  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }

  // Initialize camera
  if (esp_camera_init(&config) != ESP_OK) {
    Serial.println("Camera init failed");
    return;
  }

  // Initialize SD card (1-bit mode)
  pinMode(13, INPUT_PULLUP);
  if(!SD_MMC.begin("/sdcard", true)){
    Serial.println("SD Card Mount Failed");
    return;
  }
  pinMode(13, INPUT_PULLDOWN);
  Serial.println("SD Card initialized in 1-bit mode");

  // Turn on LED Flash
  pinMode(4, OUTPUT);
  digitalWrite(4, HIGH);
  delay(1000);

  // Capture Image
  camera_fb_t * fb = esp_camera_fb_get();  
  if(!fb) {
    Serial.println("Camera capture failed");
    return;
  }

  digitalWrite(4, LOW); // Turn off flash
  delay(1000);

  // Initialize EEPROM and read photo count
  EEPROM.begin(EEPROM_SIZE);
  pictureNumber = EEPROM.read(0) + 1;

  // Save image to SD card
  String path = "/picture" + String(pictureNumber) + ".jpg";
  fs::FS &fs = SD_MMC; 
  Serial.printf("Saving image as: %s\n", path.c_str());

  File file = fs.open(path.c_str(), FILE_WRITE);
  if(!file){
    Serial.println("Failed to open file");
  } else {
    file.write(fb->buf, fb->len);
    Serial.println("Image saved");
    EEPROM.write(0, pictureNumber);
    EEPROM.commit();
    file.close();
  }

  esp_camera_fb_return(fb);

  // Indicate deep sleep entry
  Serial.println("Entering deep sleep...");
  for(int i = 0; i < 4; i++) {
    digitalWrite(4, !digitalRead(4));
    delay(250);
  }

  // Sleep
  esp_deep_sleep_start();
}

void loop() {
  // Empty
}
